######## Configuration for MQTTany ########

# All optional values are commented out and default values are shown

### Notes on Topics:
#
# RELATIVE topics will have the 'root topic' and 'module topic' prepended.
#
# ABSOLUTE topics starting with '/' will be treated as absolute and will not
# have any other topics prepended.
#
# The following substitutions will be applied to all topics, modules may add
# more (see module for details)
# - {hostname} = the computer's hostname
# - {client_id} = the mqtt 'client id'
# - {root_topic} = the 'root topic'
# - {module_name} = the name of the module publishing or subscribing
# - {module_topic} = the main topic of the module pub-ing or sub-ing
###

######## MQTT Module ########
mqtt:

  ### Broker
  host:  # address or hostname
  #port: 1883

  ### User Data
  #client id: '{hostname}'
  #username:
  #password:

  ### Session Options
  #qos: 0
  #retain: false

  ### Topics
  #root topic: '{client_id}' # Root topic
  #lwt topic: 'lwt' # Last Will topic

  ### Heartbeat
  # Interval in seconds to publish status messages
  #heartbeat interval: 300


######## GPIO Module ########
#gpio:

  ### Pin Numbering Mode
  #mode: 'SOC'

  ### Module Topic
  #topic: '{module_name}'

  ### Setter Topic
  # messages sent here will set a pin if it's configured as an output
  # default resolves to '{root_topic}/{module_name}/{pin}/set'
  #topic set: 'set'

  ### Getter Topic
  # any message here will cause pin states to be published
  # default for all pins resolves to '{root_topic}/{module_name}/poll'
  # default for single pin resolves to '{root_topic}/{module_name}/{pin}/get'
  #topic get: 'poll'

  ### Pulse Topic
  # pulses a digital pin, see wiki for details
  # default topics resolve to '{root_topic}/{module_topic}/{pin}/pulse'
  #topic pulse: 'pulse'

  ### ON Payload
  #payload on: 'ON' # message for pin ON

  ### OFF Payload
  #payload off: 'OFF' # message for pin OFF

  ### Polling Interval
  #polling interval: 0.0 # interval in seconds to poll all pins

  ### Interrupt Debounce
  #debounce: 50 # in milliseconds

  ### Single Pin Configuration
  #Friendly Name:

    ### Pin Number
    #pin:

    ### Pin Topic
    # Additional Subsitutions:
    # - {pin} = pin number
    # - {pin:02d} = pin number padded with 0's to always be 2 numbers
    # - {pin_name} = name of this section
    #topic: '{pin}'

    ### Pin Direction
    #direction: 'input' # can be 'input' or 'output'

    ### Pin Interrupt
    #interrupt: 'none' # can be 'rising', 'falling', 'both', or 'none'

    ### Pin Resistor
    #resistor: 'off' # can be 'pullup', 'pulldown', or 'off'

    ### Pin Invert
    # true means pin states ON=LOW, OFF=HIGH
    #invert: false # can be true or false

    ### Initial State
    # must be same as payload-on or payload-off
    #initial state: '{payload_off}'

  ### Multiple Pin Configuration
  # alternatively a list of pins can be given
  # all options from a single pin configuration apply, except those shown below
  #Batch:

    ### Pin Numbers
    #pin: []

    ### Pin Topic
    # a single topic may be given, or a list of topics the same length as the
    # list of pins can be provided
    # Additional Subsitutions:
    # - {pin} = pin number
    # - {pin:02d} = pin number padded with 0's to always be 2 numbers
    # - {pin_name} = name of this section
    # - {index} = the pin's index in the list of pins plus 'first index'
    #topic: '{pin}'

    ### First Index
    # this number will be added to 'index' when substituting '{index}' in topics
    #first index: 0



######## I2C Module ########
#i2c:

  ### Module Topic
  #topic: '{module_name}'

  ### Getter Topic
  # any message here will cause pin states to be published
  # default for all pins resolves to '{root_topic}/{module_name}/{device_name}/poll'
  # default for single device resolves to '{root_topic}/{module_name}/{device_name}/poll'
  # default for single pin resolves to '{root_topic}/{module_name}/{device_name}/{pin}/get'
  #topic get: 'poll'

  ### Polling Interval
  #polling interval: 0.0 # interval in seconds to poll all pins

  ### Bus Scan
  # Scan bus for any unconfigured devices and list them
  #bus scan: false

  ### Device Configuration
  #Friendly Name:

    ### Device Type
    # Device identifier, see the wiki for a list of supported devices
    #device: ''

    ### I2C Bus ID
    # ID of the I2C bus to use on your SBC
    # ex. Raspberry Pi 3 this will probably be 1
    # Can also specify full path
    #bus:

    ### Device Address
    # 7-bit hex address of the device (ex. 0x20)
    #address: 0x

    ### Device Topic
    # Additional Substitutions:
    # - {device_name} = friendly name of device's section in config file
    # - {address:02x} = device address in hex (ex. '20')
    #topic: '{device_name}'

    ### Device Specific Options
    # Each device type may have some options specific to it
    # consult the wiki page for the device for details.



######## OneWire Module ########
#onewire:

  ### Bus Interface
  #bus: 'w1'

  ### Module Topic
  #topic: '{module_name}'

  ### Get Topic
  # any message here will cause device state to be published
  # default for all devices resolves to '{root_topic}/{module_name}/poll'
  # default for single device resolves to '{root_topic}/{module_name}/{device_name}/poll'
  #topic get: 'poll'

  ### Polling Interval
  #polling interval: 0.0 # interval in seconds to poll all pins

  ### Bus Scan
  # Scan bus for any unconfigured devices and add them
  #bus scan: false

  ### Device Configuration
  #Friendly Name:

    ### Device Address
    # The device's address, can be 7 or 8 bytes, can use w1 style `xx-xxxxxxxxxxxx`
    #address: '' # **MUST BE IN SINGLE QUOTES `''`**

    ### Device Topic
    # Additional Substitutions:
    # - {device_name} = will be replaced with the device definition section name
    # - {device_type} = will be replaced with the device type (ex. `DS18B20`)
    # - {address} = will be replaced with the device's **FULL 8 BYTE ADDRESS**
    # - {index} = will be replaced with the device's index in the list of addresses
    #topic: '{device_name}'



######## LED Module ########
#led:

  ### Module Topic
  #topic: '{module_name}'

  ### Animation Directory
  # A directory or list of directories to look for additional animations in
  #anim dir: []

  ### Startup Animation
  # Animation to play when MQTTany loads
  #anim startup: 'test.array'

  ### Animation Frame Rate
  # Frame rate for animations, you may need to decrease this for
  # longer arrays or certain interface types.
  #anim fps: 60

  ### Array Configuration
  #array_name:

    ### Output
    # The interface to use for outputting data
    # Available options are 'rpi' or 'sacn'
    #output: ''

    ### Array Topic
    # Additional Substitutions:
    # - {array_name} = will be replaced with the array definition section name
    #topic: '{array_name}'

    ### Pixel Count
    # The number of pixels in your array (not necessarily LEDs, see next option)
    #count:

    ### LEDs per Pixel
    # Allows you to have more than one LED handled as a single pixel.
    # Ex. A bulb with 3 LEDs in it can be treated as a single pixel in the array.
    # Total number of LEDs in the array should be 'count' x 'leds per pixel'
    #leds per pixel: 1

    ### Initial Brightness
    # The initial brightness of the array, can be 0-255
    #brightness: 255

    ### Color Order
    # The byte order for the color data sent to the LEDs.
    # See the 'test.order' animation for how to determine this
    #color order: '{default}'

    ### Interface Specific Options
    # Each interface may have some options specific to it
    # consult the wiki page for the interface for details.
